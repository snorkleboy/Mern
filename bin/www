#!/usr/bin/env node


var app = require('../express/expressApp');
var debug = require('debug')('mean-app:server');
var http = require('http');
// console.log(app);
// get port or pipe
var port = normalizePort(process.env.PORT || process.argv[2]|| '3000');
app.set('port', port);

//listen
//create server =function createServer(function(res,req){})
//middle ware, app, routers = function(res,req,next){}
                        // var server = http.createServer(app);
                        // server.listen(port);

                        // // just gives better errors for EADDRINUSE type stuff
                        // server.on('error', onError);

                        // // logs success
                        // server.on('listening', onListening);


const server = app.listen(port);



function normalizePort(val) {
  port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
      'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}